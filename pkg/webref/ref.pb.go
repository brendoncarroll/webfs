// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ref.proto

package webref

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EncAlgo int32

const (
	EncAlgo_UNKNOWN_EA EncAlgo = 0
	EncAlgo_AES256CTR  EncAlgo = 1
	EncAlgo_CHACHA20   EncAlgo = 2
)

var EncAlgo_name = map[int32]string{
	0: "UNKNOWN_EA",
	1: "AES256CTR",
	2: "CHACHA20",
}

var EncAlgo_value = map[string]int32{
	"UNKNOWN_EA": 0,
	"AES256CTR":  1,
	"CHACHA20":   2,
}

func (x EncAlgo) String() string {
	return proto.EnumName(EncAlgo_name, int32(x))
}

func (EncAlgo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{0}
}

type CompressAlgo int32

const (
	CompressAlgo_UNKNOWN_CA CompressAlgo = 0
	CompressAlgo_SNAPPY     CompressAlgo = 1
)

var CompressAlgo_name = map[int32]string{
	0: "UNKNOWN_CA",
	1: "SNAPPY",
}

var CompressAlgo_value = map[string]int32{
	"UNKNOWN_CA": 0,
	"SNAPPY":     1,
}

func (x CompressAlgo) String() string {
	return proto.EnumName(CompressAlgo_name, int32(x))
}

func (CompressAlgo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{1}
}

type Crypto struct {
	Ref                  *Ref     `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	EncAlgo              EncAlgo  `protobuf:"varint,2,opt,name=enc_algo,json=encAlgo,proto3,enum=webref.EncAlgo" json:"enc_algo,omitempty"`
	Dek                  []byte   `protobuf:"bytes,3,opt,name=dek,proto3" json:"dek,omitempty"`
	Length               int32    `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Crypto) Reset()         { *m = Crypto{} }
func (m *Crypto) String() string { return proto.CompactTextString(m) }
func (*Crypto) ProtoMessage()    {}
func (*Crypto) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{0}
}

func (m *Crypto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Crypto.Unmarshal(m, b)
}
func (m *Crypto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Crypto.Marshal(b, m, deterministic)
}
func (m *Crypto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crypto.Merge(m, src)
}
func (m *Crypto) XXX_Size() int {
	return xxx_messageInfo_Crypto.Size(m)
}
func (m *Crypto) XXX_DiscardUnknown() {
	xxx_messageInfo_Crypto.DiscardUnknown(m)
}

var xxx_messageInfo_Crypto proto.InternalMessageInfo

func (m *Crypto) GetRef() *Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *Crypto) GetEncAlgo() EncAlgo {
	if m != nil {
		return m.EncAlgo
	}
	return EncAlgo_UNKNOWN_EA
}

func (m *Crypto) GetDek() []byte {
	if m != nil {
		return m.Dek
	}
	return nil
}

func (m *Crypto) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type Slice struct {
	Ref                  *Ref     `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Offset               int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Length               int32    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Slice) Reset()         { *m = Slice{} }
func (m *Slice) String() string { return proto.CompactTextString(m) }
func (*Slice) ProtoMessage()    {}
func (*Slice) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{1}
}

func (m *Slice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Slice.Unmarshal(m, b)
}
func (m *Slice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Slice.Marshal(b, m, deterministic)
}
func (m *Slice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slice.Merge(m, src)
}
func (m *Slice) XXX_Size() int {
	return xxx_messageInfo_Slice.Size(m)
}
func (m *Slice) XXX_DiscardUnknown() {
	xxx_messageInfo_Slice.DiscardUnknown(m)
}

var xxx_messageInfo_Slice proto.InternalMessageInfo

func (m *Slice) GetRef() *Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *Slice) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Slice) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type Mirror struct {
	Refs                 []*Ref   `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mirror) Reset()         { *m = Mirror{} }
func (m *Mirror) String() string { return proto.CompactTextString(m) }
func (*Mirror) ProtoMessage()    {}
func (*Mirror) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{2}
}

func (m *Mirror) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mirror.Unmarshal(m, b)
}
func (m *Mirror) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mirror.Marshal(b, m, deterministic)
}
func (m *Mirror) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mirror.Merge(m, src)
}
func (m *Mirror) XXX_Size() int {
	return xxx_messageInfo_Mirror.Size(m)
}
func (m *Mirror) XXX_DiscardUnknown() {
	xxx_messageInfo_Mirror.DiscardUnknown(m)
}

var xxx_messageInfo_Mirror proto.InternalMessageInfo

func (m *Mirror) GetRefs() []*Ref {
	if m != nil {
		return m.Refs
	}
	return nil
}

type ReedSolomon struct {
	Pieces               []*Ref   `protobuf:"bytes,1,rep,name=pieces,proto3" json:"pieces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReedSolomon) Reset()         { *m = ReedSolomon{} }
func (m *ReedSolomon) String() string { return proto.CompactTextString(m) }
func (*ReedSolomon) ProtoMessage()    {}
func (*ReedSolomon) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{3}
}

func (m *ReedSolomon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReedSolomon.Unmarshal(m, b)
}
func (m *ReedSolomon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReedSolomon.Marshal(b, m, deterministic)
}
func (m *ReedSolomon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReedSolomon.Merge(m, src)
}
func (m *ReedSolomon) XXX_Size() int {
	return xxx_messageInfo_ReedSolomon.Size(m)
}
func (m *ReedSolomon) XXX_DiscardUnknown() {
	xxx_messageInfo_ReedSolomon.DiscardUnknown(m)
}

var xxx_messageInfo_ReedSolomon proto.InternalMessageInfo

func (m *ReedSolomon) GetPieces() []*Ref {
	if m != nil {
		return m.Pieces
	}
	return nil
}

type Annotated struct {
	Ref                  *Ref              `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Annotations          map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Annotated) Reset()         { *m = Annotated{} }
func (m *Annotated) String() string { return proto.CompactTextString(m) }
func (*Annotated) ProtoMessage()    {}
func (*Annotated) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{4}
}

func (m *Annotated) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Annotated.Unmarshal(m, b)
}
func (m *Annotated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Annotated.Marshal(b, m, deterministic)
}
func (m *Annotated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Annotated.Merge(m, src)
}
func (m *Annotated) XXX_Size() int {
	return xxx_messageInfo_Annotated.Size(m)
}
func (m *Annotated) XXX_DiscardUnknown() {
	xxx_messageInfo_Annotated.DiscardUnknown(m)
}

var xxx_messageInfo_Annotated proto.InternalMessageInfo

func (m *Annotated) GetRef() *Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *Annotated) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type Compress struct {
	Ref                  *Ref         `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Algo                 CompressAlgo `protobuf:"varint,2,opt,name=algo,proto3,enum=webref.CompressAlgo" json:"algo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Compress) Reset()         { *m = Compress{} }
func (m *Compress) String() string { return proto.CompactTextString(m) }
func (*Compress) ProtoMessage()    {}
func (*Compress) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{5}
}

func (m *Compress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Compress.Unmarshal(m, b)
}
func (m *Compress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Compress.Marshal(b, m, deterministic)
}
func (m *Compress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Compress.Merge(m, src)
}
func (m *Compress) XXX_Size() int {
	return xxx_messageInfo_Compress.Size(m)
}
func (m *Compress) XXX_DiscardUnknown() {
	xxx_messageInfo_Compress.DiscardUnknown(m)
}

var xxx_messageInfo_Compress proto.InternalMessageInfo

func (m *Compress) GetRef() *Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *Compress) GetAlgo() CompressAlgo {
	if m != nil {
		return m.Algo
	}
	return CompressAlgo_UNKNOWN_CA
}

type Ref struct {
	// Types that are valid to be assigned to Ref:
	//	*Ref_Url
	//	*Ref_Crypto
	//	*Ref_Slice
	//	*Ref_Mirror
	//	*Ref_Annotated
	//	*Ref_ReedSolomon
	//	*Ref_Compress
	Ref                  isRef_Ref `protobuf_oneof:"ref"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Ref) Reset()         { *m = Ref{} }
func (m *Ref) String() string { return proto.CompactTextString(m) }
func (*Ref) ProtoMessage()    {}
func (*Ref) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{6}
}

func (m *Ref) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ref.Unmarshal(m, b)
}
func (m *Ref) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ref.Marshal(b, m, deterministic)
}
func (m *Ref) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ref.Merge(m, src)
}
func (m *Ref) XXX_Size() int {
	return xxx_messageInfo_Ref.Size(m)
}
func (m *Ref) XXX_DiscardUnknown() {
	xxx_messageInfo_Ref.DiscardUnknown(m)
}

var xxx_messageInfo_Ref proto.InternalMessageInfo

type isRef_Ref interface {
	isRef_Ref()
}

type Ref_Url struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

type Ref_Crypto struct {
	Crypto *Crypto `protobuf:"bytes,2,opt,name=crypto,proto3,oneof"`
}

type Ref_Slice struct {
	Slice *Slice `protobuf:"bytes,3,opt,name=slice,proto3,oneof"`
}

type Ref_Mirror struct {
	Mirror *Mirror `protobuf:"bytes,4,opt,name=mirror,proto3,oneof"`
}

type Ref_Annotated struct {
	Annotated *Annotated `protobuf:"bytes,5,opt,name=annotated,proto3,oneof"`
}

type Ref_ReedSolomon struct {
	ReedSolomon *ReedSolomon `protobuf:"bytes,6,opt,name=reed_solomon,json=reedSolomon,proto3,oneof"`
}

type Ref_Compress struct {
	Compress *Compress `protobuf:"bytes,7,opt,name=compress,proto3,oneof"`
}

func (*Ref_Url) isRef_Ref() {}

func (*Ref_Crypto) isRef_Ref() {}

func (*Ref_Slice) isRef_Ref() {}

func (*Ref_Mirror) isRef_Ref() {}

func (*Ref_Annotated) isRef_Ref() {}

func (*Ref_ReedSolomon) isRef_Ref() {}

func (*Ref_Compress) isRef_Ref() {}

func (m *Ref) GetRef() isRef_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *Ref) GetUrl() string {
	if x, ok := m.GetRef().(*Ref_Url); ok {
		return x.Url
	}
	return ""
}

func (m *Ref) GetCrypto() *Crypto {
	if x, ok := m.GetRef().(*Ref_Crypto); ok {
		return x.Crypto
	}
	return nil
}

func (m *Ref) GetSlice() *Slice {
	if x, ok := m.GetRef().(*Ref_Slice); ok {
		return x.Slice
	}
	return nil
}

func (m *Ref) GetMirror() *Mirror {
	if x, ok := m.GetRef().(*Ref_Mirror); ok {
		return x.Mirror
	}
	return nil
}

func (m *Ref) GetAnnotated() *Annotated {
	if x, ok := m.GetRef().(*Ref_Annotated); ok {
		return x.Annotated
	}
	return nil
}

func (m *Ref) GetReedSolomon() *ReedSolomon {
	if x, ok := m.GetRef().(*Ref_ReedSolomon); ok {
		return x.ReedSolomon
	}
	return nil
}

func (m *Ref) GetCompress() *Compress {
	if x, ok := m.GetRef().(*Ref_Compress); ok {
		return x.Compress
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Ref) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Ref_Url)(nil),
		(*Ref_Crypto)(nil),
		(*Ref_Slice)(nil),
		(*Ref_Mirror)(nil),
		(*Ref_Annotated)(nil),
		(*Ref_ReedSolomon)(nil),
		(*Ref_Compress)(nil),
	}
}

type Options struct {
	EncAlgo              EncAlgo           `protobuf:"varint,1,opt,name=enc_algo,json=encAlgo,proto3,enum=webref.EncAlgo" json:"enc_algo,omitempty"`
	SecretSeed           []byte            `protobuf:"bytes,2,opt,name=secret_seed,json=secretSeed,proto3" json:"secret_seed,omitempty"`
	ObfuscateLength      bool              `protobuf:"varint,3,opt,name=obfuscate_length,json=obfuscateLength,proto3" json:"obfuscate_length,omitempty"`
	Replicas             map[string]int32  `protobuf:"bytes,4,rep,name=replicas,proto3" json:"replicas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Attrs                map[string]string `protobuf:"bytes,5,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Options) Reset()         { *m = Options{} }
func (m *Options) String() string { return proto.CompactTextString(m) }
func (*Options) ProtoMessage()    {}
func (*Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{7}
}

func (m *Options) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Options.Unmarshal(m, b)
}
func (m *Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Options.Marshal(b, m, deterministic)
}
func (m *Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Options.Merge(m, src)
}
func (m *Options) XXX_Size() int {
	return xxx_messageInfo_Options.Size(m)
}
func (m *Options) XXX_DiscardUnknown() {
	xxx_messageInfo_Options.DiscardUnknown(m)
}

var xxx_messageInfo_Options proto.InternalMessageInfo

func (m *Options) GetEncAlgo() EncAlgo {
	if m != nil {
		return m.EncAlgo
	}
	return EncAlgo_UNKNOWN_EA
}

func (m *Options) GetSecretSeed() []byte {
	if m != nil {
		return m.SecretSeed
	}
	return nil
}

func (m *Options) GetObfuscateLength() bool {
	if m != nil {
		return m.ObfuscateLength
	}
	return false
}

func (m *Options) GetReplicas() map[string]int32 {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *Options) GetAttrs() map[string]string {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func init() {
	proto.RegisterEnum("webref.EncAlgo", EncAlgo_name, EncAlgo_value)
	proto.RegisterEnum("webref.CompressAlgo", CompressAlgo_name, CompressAlgo_value)
	proto.RegisterType((*Crypto)(nil), "webref.Crypto")
	proto.RegisterType((*Slice)(nil), "webref.Slice")
	proto.RegisterType((*Mirror)(nil), "webref.Mirror")
	proto.RegisterType((*ReedSolomon)(nil), "webref.ReedSolomon")
	proto.RegisterType((*Annotated)(nil), "webref.Annotated")
	proto.RegisterMapType((map[string]string)(nil), "webref.Annotated.AnnotationsEntry")
	proto.RegisterType((*Compress)(nil), "webref.Compress")
	proto.RegisterType((*Ref)(nil), "webref.Ref")
	proto.RegisterType((*Options)(nil), "webref.Options")
	proto.RegisterMapType((map[string]string)(nil), "webref.Options.AttrsEntry")
	proto.RegisterMapType((map[string]int32)(nil), "webref.Options.ReplicasEntry")
}

func init() { proto.RegisterFile("ref.proto", fileDescriptor_65d958559ea81b29) }

var fileDescriptor_65d958559ea81b29 = []byte{
	// 686 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6a, 0xdb, 0x48,
	0x14, 0xb6, 0x6c, 0x4b, 0xb6, 0x8f, 0x9c, 0x44, 0x3b, 0x1b, 0x82, 0x30, 0x84, 0x18, 0x2d, 0x0b,
	0x8e, 0x59, 0xec, 0xac, 0x4b, 0x43, 0xda, 0x42, 0x41, 0x71, 0x0d, 0x82, 0xb6, 0x4e, 0x18, 0xf7,
	0x87, 0xf6, 0xc6, 0xc8, 0xf2, 0x91, 0x63, 0x22, 0x6b, 0xc4, 0x48, 0x6e, 0xc8, 0x45, 0xdf, 0xa9,
	0x97, 0x7d, 0xa1, 0xbe, 0x47, 0xd1, 0x8c, 0xe4, 0x28, 0x6e, 0xc1, 0xf4, 0x6e, 0x66, 0xbe, 0x9f,
	0x19, 0xbe, 0xf3, 0x49, 0xd0, 0xe0, 0xe8, 0xf7, 0x22, 0xce, 0x12, 0x46, 0xb4, 0x3b, 0x9c, 0x71,
	0xf4, 0xad, 0xaf, 0xa0, 0x0d, 0xf9, 0x7d, 0x94, 0x30, 0x72, 0x0c, 0x15, 0x8e, 0xbe, 0xa9, 0xb4,
	0x95, 0x8e, 0x3e, 0xd0, 0x7b, 0x12, 0xef, 0x51, 0xf4, 0x69, 0x7a, 0x4e, 0xba, 0x50, 0xc7, 0xd0,
	0x9b, 0xba, 0xc1, 0x82, 0x99, 0xe5, 0xb6, 0xd2, 0xd9, 0x1f, 0x1c, 0xe4, 0x9c, 0x51, 0xe8, 0xd9,
	0xc1, 0x82, 0xd1, 0x1a, 0xca, 0x05, 0x31, 0xa0, 0x32, 0xc7, 0x5b, 0xb3, 0xd2, 0x56, 0x3a, 0x4d,
	0x9a, 0x2e, 0xc9, 0x11, 0x68, 0x01, 0x86, 0x8b, 0xe4, 0xc6, 0xac, 0xb6, 0x95, 0x8e, 0x4a, 0xb3,
	0x9d, 0xf5, 0x01, 0xd4, 0x49, 0xb0, 0xf4, 0x70, 0xd7, 0xed, 0x47, 0xa0, 0x31, 0xdf, 0x8f, 0x31,
	0x11, 0x77, 0xab, 0x34, 0xdb, 0x15, 0x7c, 0x2b, 0x8f, 0x7c, 0x4f, 0x41, 0x7b, 0xbb, 0xe4, 0x9c,
	0x71, 0x72, 0x02, 0x55, 0x8e, 0x7e, 0x6c, 0x2a, 0xed, 0xca, 0xb6, 0xb3, 0x00, 0xac, 0x01, 0xe8,
	0x14, 0x71, 0x3e, 0x61, 0x01, 0x5b, 0xb1, 0x90, 0xfc, 0x03, 0x5a, 0xb4, 0x44, 0x0f, 0x7f, 0xab,
	0xc8, 0x20, 0xeb, 0x9b, 0x02, 0x0d, 0x3b, 0x0c, 0x59, 0xe2, 0x26, 0x38, 0xdf, 0xf5, 0xf6, 0x57,
	0xa0, 0xbb, 0x92, 0xbb, 0x64, 0x61, 0x6c, 0x96, 0x85, 0xad, 0x95, 0xd3, 0x36, 0x36, 0xf9, 0x2a,
	0x25, 0x8d, 0xc2, 0x84, 0xdf, 0xd3, 0xa2, 0xac, 0xf5, 0x12, 0x8c, 0x6d, 0x42, 0x9a, 0xf3, 0x2d,
	0xde, 0x8b, 0x8b, 0x1b, 0x34, 0x5d, 0x92, 0x43, 0x50, 0xbf, 0xb8, 0xc1, 0x1a, 0x45, 0x4c, 0x0d,
	0x2a, 0x37, 0xcf, 0xcb, 0x17, 0x8a, 0x35, 0x81, 0xfa, 0x90, 0xad, 0x22, 0x8e, 0x71, 0xbc, 0xeb,
	0xc1, 0x1d, 0xa8, 0x16, 0xc6, 0x7c, 0x98, 0xe3, 0xb9, 0x5c, 0xcc, 0x5a, 0x30, 0xac, 0xef, 0x65,
	0xa8, 0x50, 0xf4, 0x09, 0x81, 0xca, 0x9a, 0x07, 0xf2, 0x21, 0x4e, 0x89, 0xa6, 0x1b, 0xd2, 0x01,
	0xcd, 0x13, 0xcd, 0x12, 0x3e, 0xfa, 0x60, 0x7f, 0xe3, 0x23, 0x4e, 0x9d, 0x12, 0xcd, 0x70, 0xf2,
	0x2f, 0xa8, 0x71, 0x5a, 0x02, 0x31, 0x43, 0x7d, 0xb0, 0x97, 0x13, 0x45, 0x33, 0x9c, 0x12, 0x95,
	0x68, 0x6a, 0xb8, 0x12, 0x33, 0x15, 0x1d, 0x2a, 0x18, 0xca, 0x49, 0xa7, 0x86, 0x12, 0x27, 0xff,
	0x43, 0xc3, 0xcd, 0x63, 0x35, 0x55, 0x41, 0xfe, 0xeb, 0x97, 0xbc, 0x9d, 0x12, 0x7d, 0x60, 0x91,
	0x0b, 0x68, 0x72, 0xc4, 0xf9, 0x34, 0x96, 0x35, 0x30, 0x35, 0xa1, 0xfa, 0xfb, 0x21, 0x9b, 0x4d,
	0x43, 0x9c, 0x12, 0xd5, 0x79, 0xa1, 0x30, 0x3d, 0xa8, 0x7b, 0x59, 0x32, 0x66, 0x4d, 0xa8, 0x8c,
	0xed, 0xc4, 0x9c, 0x12, 0xdd, 0x70, 0x2e, 0x55, 0x11, 0xbe, 0xf5, 0xa3, 0x0c, 0xb5, 0xab, 0x48,
	0x0c, 0xf3, 0xd1, 0xb7, 0xa5, 0xec, 0xf8, 0xb6, 0x4e, 0x40, 0x8f, 0xd1, 0xe3, 0x98, 0x4c, 0x63,
	0xc4, 0xb9, 0xc8, 0xb6, 0x49, 0x41, 0x1e, 0x4d, 0x10, 0xe7, 0xe4, 0x14, 0x0c, 0x36, 0xf3, 0xd7,
	0xb1, 0xe7, 0x26, 0x38, 0x2d, 0x7c, 0x1c, 0x75, 0x7a, 0xb0, 0x39, 0x7f, 0x23, 0x8e, 0xc9, 0x33,
	0xa8, 0x73, 0x8c, 0x82, 0xa5, 0xe7, 0xc6, 0x66, 0x55, 0xd4, 0xf2, 0x38, 0xbf, 0x37, 0x7b, 0x5a,
	0x8f, 0x66, 0xb8, 0x6c, 0xe4, 0x86, 0x4e, 0xce, 0x40, 0x75, 0x93, 0x84, 0xc7, 0xa6, 0x2a, 0x74,
	0xad, 0x6d, 0x9d, 0x9d, 0x82, 0x52, 0x24, 0x89, 0xad, 0x17, 0xb0, 0xf7, 0xc8, 0x6c, 0x57, 0x7b,
	0xd5, 0x42, 0x7b, 0x5b, 0x17, 0x00, 0x0f, 0x8e, 0x7f, 0xd2, 0xfb, 0xee, 0x39, 0xd4, 0xb2, 0x0c,
	0xc9, 0x3e, 0xc0, 0xfb, 0xf1, 0xeb, 0xf1, 0xd5, 0xc7, 0xf1, 0x74, 0x64, 0x1b, 0x25, 0xb2, 0x07,
	0x0d, 0x7b, 0x34, 0x19, 0x3c, 0x3d, 0x1f, 0xbe, 0xa3, 0x86, 0x42, 0x9a, 0x50, 0x1f, 0x3a, 0xf6,
	0xd0, 0xb1, 0x07, 0x67, 0x46, 0xb9, 0xdb, 0x85, 0x66, 0xb1, 0xf0, 0x45, 0xf1, 0x30, 0x15, 0x03,
	0x68, 0x93, 0xb1, 0x7d, 0x7d, 0xfd, 0xc9, 0x50, 0x2e, 0xff, 0xfb, 0xdc, 0x5d, 0x2c, 0x93, 0x9b,
	0xf5, 0xac, 0xe7, 0xb1, 0x55, 0x7f, 0xc6, 0x31, 0x9c, 0xb3, 0xd0, 0x73, 0x39, 0x67, 0x41, 0xd0,
	0xbf, 0xc3, 0x99, 0x1f, 0xf7, 0xa3, 0xdb, 0x45, 0x5f, 0x46, 0x34, 0xd3, 0xc4, 0x1f, 0xf8, 0xc9,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xa6, 0x22, 0x45, 0x8e, 0x05, 0x00, 0x00,
}
