// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ccp.proto

package rwacryptocell

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CellState struct {
	Acl                  *ACL           `protobuf:"bytes,1,opt,name=acl,proto3" json:"acl,omitempty"`
	AclAuthor            int32          `protobuf:"varint,2,opt,name=acl_author,json=aclAuthor,proto3" json:"acl_author,omitempty"`
	AclSigs              map[int32]*Sig `protobuf:"bytes,3,rep,name=acl_sigs,json=aclSigs,proto3" json:"acl_sigs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	What                 *What          `protobuf:"bytes,4,opt,name=what,proto3" json:"what,omitempty"`
	WhatAuthor           int32          `protobuf:"varint,5,opt,name=what_author,json=whatAuthor,proto3" json:"what_author,omitempty"`
	WhatSig              *Sig           `protobuf:"bytes,6,opt,name=what_sig,json=whatSig,proto3" json:"what_sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CellState) Reset()         { *m = CellState{} }
func (m *CellState) String() string { return proto.CompactTextString(m) }
func (*CellState) ProtoMessage()    {}
func (*CellState) Descriptor() ([]byte, []int) {
	return fileDescriptor_879d78a8e7a0223a, []int{0}
}

func (m *CellState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CellState.Unmarshal(m, b)
}
func (m *CellState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CellState.Marshal(b, m, deterministic)
}
func (m *CellState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellState.Merge(m, src)
}
func (m *CellState) XXX_Size() int {
	return xxx_messageInfo_CellState.Size(m)
}
func (m *CellState) XXX_DiscardUnknown() {
	xxx_messageInfo_CellState.DiscardUnknown(m)
}

var xxx_messageInfo_CellState proto.InternalMessageInfo

func (m *CellState) GetAcl() *ACL {
	if m != nil {
		return m.Acl
	}
	return nil
}

func (m *CellState) GetAclAuthor() int32 {
	if m != nil {
		return m.AclAuthor
	}
	return 0
}

func (m *CellState) GetAclSigs() map[int32]*Sig {
	if m != nil {
		return m.AclSigs
	}
	return nil
}

func (m *CellState) GetWhat() *What {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *CellState) GetWhatAuthor() int32 {
	if m != nil {
		return m.WhatAuthor
	}
	return 0
}

func (m *CellState) GetWhatSig() *Sig {
	if m != nil {
		return m.WhatSig
	}
	return nil
}

type ACL struct {
	Entities             []*Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	Admin                []int32   `protobuf:"varint,2,rep,packed,name=admin,proto3" json:"admin,omitempty"`
	Write                []int32   `protobuf:"varint,3,rep,packed,name=write,proto3" json:"write,omitempty"`
	Read                 []int32   `protobuf:"varint,4,rep,packed,name=read,proto3" json:"read,omitempty"`
	Gen                  int64     `protobuf:"varint,5,opt,name=gen,proto3" json:"gen,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ACL) Reset()         { *m = ACL{} }
func (m *ACL) String() string { return proto.CompactTextString(m) }
func (*ACL) ProtoMessage()    {}
func (*ACL) Descriptor() ([]byte, []int) {
	return fileDescriptor_879d78a8e7a0223a, []int{1}
}

func (m *ACL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ACL.Unmarshal(m, b)
}
func (m *ACL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ACL.Marshal(b, m, deterministic)
}
func (m *ACL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACL.Merge(m, src)
}
func (m *ACL) XXX_Size() int {
	return xxx_messageInfo_ACL.Size(m)
}
func (m *ACL) XXX_DiscardUnknown() {
	xxx_messageInfo_ACL.DiscardUnknown(m)
}

var xxx_messageInfo_ACL proto.InternalMessageInfo

func (m *ACL) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ACL) GetAdmin() []int32 {
	if m != nil {
		return m.Admin
	}
	return nil
}

func (m *ACL) GetWrite() []int32 {
	if m != nil {
		return m.Write
	}
	return nil
}

func (m *ACL) GetRead() []int32 {
	if m != nil {
		return m.Read
	}
	return nil
}

func (m *ACL) GetGen() int64 {
	if m != nil {
		return m.Gen
	}
	return 0
}

type What struct {
	Payload              *EncMsg       `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Deks                 []*AsymEncMsg `protobuf:"bytes,2,rep,name=deks,proto3" json:"deks,omitempty"`
	Gen                  int64         `protobuf:"varint,3,opt,name=gen,proto3" json:"gen,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *What) Reset()         { *m = What{} }
func (m *What) String() string { return proto.CompactTextString(m) }
func (*What) ProtoMessage()    {}
func (*What) Descriptor() ([]byte, []int) {
	return fileDescriptor_879d78a8e7a0223a, []int{2}
}

func (m *What) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_What.Unmarshal(m, b)
}
func (m *What) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_What.Marshal(b, m, deterministic)
}
func (m *What) XXX_Merge(src proto.Message) {
	xxx_messageInfo_What.Merge(m, src)
}
func (m *What) XXX_Size() int {
	return xxx_messageInfo_What.Size(m)
}
func (m *What) XXX_DiscardUnknown() {
	xxx_messageInfo_What.DiscardUnknown(m)
}

var xxx_messageInfo_What proto.InternalMessageInfo

func (m *What) GetPayload() *EncMsg {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *What) GetDeks() []*AsymEncMsg {
	if m != nil {
		return m.Deks
	}
	return nil
}

func (m *What) GetGen() int64 {
	if m != nil {
		return m.Gen
	}
	return 0
}

type LocalState struct {
	Acl                  *ACL     `protobuf:"bytes,1,opt,name=acl,proto3" json:"acl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalState) Reset()         { *m = LocalState{} }
func (m *LocalState) String() string { return proto.CompactTextString(m) }
func (*LocalState) ProtoMessage()    {}
func (*LocalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_879d78a8e7a0223a, []int{3}
}

func (m *LocalState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalState.Unmarshal(m, b)
}
func (m *LocalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalState.Marshal(b, m, deterministic)
}
func (m *LocalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalState.Merge(m, src)
}
func (m *LocalState) XXX_Size() int {
	return xxx_messageInfo_LocalState.Size(m)
}
func (m *LocalState) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalState.DiscardUnknown(m)
}

var xxx_messageInfo_LocalState proto.InternalMessageInfo

func (m *LocalState) GetAcl() *ACL {
	if m != nil {
		return m.Acl
	}
	return nil
}

func init() {
	proto.RegisterType((*CellState)(nil), "ccp.CellState")
	proto.RegisterMapType((map[int32]*Sig)(nil), "ccp.CellState.AclSigsEntry")
	proto.RegisterType((*ACL)(nil), "ccp.ACL")
	proto.RegisterType((*What)(nil), "ccp.What")
	proto.RegisterType((*LocalState)(nil), "ccp.LocalState")
}

func init() { proto.RegisterFile("ccp.proto", fileDescriptor_879d78a8e7a0223a) }

var fileDescriptor_879d78a8e7a0223a = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xc7, 0x95, 0x3a, 0xd9, 0xb6, 0x93, 0x95, 0x40, 0x16, 0x87, 0xa8, 0x68, 0xa1, 0xea, 0x0a,
	0x91, 0x53, 0x23, 0x15, 0x89, 0xaf, 0x5b, 0x29, 0x7b, 0x2b, 0x17, 0xf7, 0x80, 0xc4, 0x05, 0xb9,
	0x8e, 0x71, 0xad, 0xba, 0x71, 0x64, 0xbb, 0x54, 0xb9, 0xf1, 0x3a, 0xbc, 0x25, 0xf2, 0xa4, 0x5d,
	0x7a, 0xdb, 0x93, 0x67, 0x7e, 0x33, 0xe3, 0xff, 0x8c, 0x3d, 0x30, 0x16, 0xa2, 0x9d, 0xb7, 0xce,
	0x06, 0x4b, 0x89, 0x10, 0xed, 0xe4, 0x56, 0xb8, 0xae, 0x0d, 0xb6, 0x47, 0xb3, 0xbf, 0x03, 0x18,
	0xaf, 0xa4, 0x31, 0x9b, 0xc0, 0x83, 0xa4, 0x13, 0x20, 0x5c, 0x98, 0x22, 0x99, 0x26, 0x65, 0xbe,
	0x18, 0xcd, 0x63, 0xe5, 0x72, 0xb5, 0x66, 0x11, 0xd2, 0x3b, 0x00, 0x2e, 0xcc, 0x4f, 0x7e, 0x0c,
	0x3b, 0xeb, 0x8a, 0xc1, 0x34, 0x29, 0x33, 0x36, 0xe6, 0xc2, 0x2c, 0x11, 0xd0, 0xf7, 0x30, 0x8a,
	0x61, 0xaf, 0x95, 0x2f, 0xc8, 0x94, 0x94, 0xf9, 0xe2, 0x25, 0xd6, 0x3f, 0x5e, 0x3e, 0x5f, 0x0a,
	0xb3, 0xd1, 0xca, 0x3f, 0x34, 0xc1, 0x75, 0x6c, 0xc8, 0x7b, 0x8f, 0xde, 0x41, 0x7a, 0xda, 0xf1,
	0x50, 0xa4, 0xa8, 0x39, 0xc6, 0x9a, 0xef, 0x3b, 0x1e, 0x18, 0x62, 0xfa, 0x1a, 0xf2, 0x78, 0x5e,
	0x64, 0x33, 0x94, 0x85, 0x88, 0xce, 0xba, 0xf7, 0x30, 0xc2, 0x04, 0xaf, 0x55, 0x71, 0x73, 0xd5,
	0xf7, 0x46, 0x2b, 0x36, 0x8c, 0x91, 0x8d, 0x56, 0x93, 0xaf, 0x70, 0x7b, 0xad, 0x4e, 0x9f, 0x03,
	0xd9, 0xcb, 0x0e, 0xe7, 0xcc, 0x58, 0x34, 0xe9, 0x2b, 0xc8, 0x7e, 0x73, 0x73, 0x94, 0x38, 0xd8,
	0xf5, 0x1d, 0x3d, 0xfe, 0x3c, 0xf8, 0x98, 0xcc, 0xfe, 0x24, 0x40, 0x96, 0xab, 0x35, 0x7d, 0x0b,
	0x23, 0xd9, 0x04, 0x1d, 0xb4, 0xf4, 0x45, 0x82, 0xa3, 0xe6, 0x98, 0xfe, 0x10, 0x61, 0xc7, 0x1e,
	0x83, 0xf4, 0x05, 0x64, 0xbc, 0x3e, 0xe8, 0xa6, 0x18, 0x4c, 0x49, 0x99, 0xb1, 0xde, 0x89, 0xf4,
	0xe4, 0x74, 0x90, 0xf8, 0x4c, 0x19, 0xeb, 0x1d, 0x4a, 0x21, 0x75, 0x92, 0xd7, 0x45, 0x8a, 0x10,
	0xed, 0xd8, 0xa6, 0x92, 0x0d, 0x0e, 0x4d, 0x58, 0x34, 0x67, 0x35, 0xa4, 0xf1, 0x71, 0xe8, 0x1b,
	0x18, 0xb6, 0xbc, 0x33, 0x96, 0xd7, 0xe7, 0xcf, 0xba, 0x74, 0x20, 0xbe, 0x79, 0xc5, 0x2e, 0x31,
	0x7a, 0x0f, 0x69, 0x2d, 0xf7, 0x1e, 0xf5, 0xf3, 0xc5, 0xb3, 0xfe, 0x43, 0x7d, 0x77, 0x38, 0xe7,
	0x61, 0xf0, 0xa2, 0x42, 0xfe, 0xab, 0x94, 0x00, 0x6b, 0x2b, 0xf8, 0xd3, 0x4b, 0xf1, 0xe5, 0xd3,
	0x8f, 0x0f, 0x4a, 0x87, 0xdd, 0x71, 0x3b, 0x17, 0xf6, 0x50, 0x6d, 0x9d, 0x6c, 0x6a, 0xdb, 0x08,
	0xee, 0x9c, 0x35, 0xa6, 0x3a, 0xc9, 0xed, 0x2f, 0x5f, 0xb5, 0x7b, 0x55, 0x09, 0x69, 0x8c, 0xaf,
	0xdc, 0x89, 0xf7, 0xbb, 0x17, 0xdd, 0xed, 0x0d, 0x2e, 0xe0, 0xbb, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xb1, 0x89, 0xe2, 0x60, 0xa0, 0x02, 0x00, 0x00,
}
